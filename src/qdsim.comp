/********************************************************************
* Description:  qdsim.comp
*
* Author: Karl Cunningham
* License: LGPL Version 3 or later
*
* Copyright (c) 2011 All rights reserved.
*
********************************************************************
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of version 2 or later of the GNU General
 * Public License as published by the Free Software Foundation.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111 USA
 *
 * THE AUTHORS OF THIS LIBRARY ACCEPT ABSOLUTELY NO LIABILITY FOR
 * ANY HARM OR LOSS RESULTING FROM ITS USE.  IT IS _EXTREMELY_ UNWISE
 * TO RELY ON SOFTWARE ALONE FOR SAFETY.  Any machinery capable of
 * harming persons must have provisions for completely removing power
 * from all motors, etc, before persons enter any danger area.  All
 * machinery must be designed to comply with local and national safety
 * codes, and the authors of this software can not, and do not, take
 * any responsibility for such compliance.
 *
 * This code was written as part of the EMC HAL project.  For more
 * information, go to www.linuxcnc.org.
 *
*************************************************************************/

component qdsim "EMC HAL component to simulate the Dana Summit Quickdraw tool changer";

pin in bit tool_in_command "Tool-In command to the tool changer. Moves the arm to the spindle";
pin in bit tool_out_command "Tool-Out command to the tool changer. Moves the arm to the carousel";
pin in bit carousel_cw_command "Turret CW command to the tool changer. Moves the carousel clockwise";
pin in bit carousel_ccw_command "Turret CCW command to the tool changer. Moves the carousel counterclockwise";
pin in bit carousel_home_command "Turret Home command to the tool changer.";

pin out bit qd_reset "Reset signal from the Quickdraw Tool Changer that the current operation is complete";
pin out bit claw_open_out "Indication that the claw is being held in the opon position.";
pin out float test "Debugging test output";

pin out signed cur_tool_no "Current tool number";
pin out signed cur_state_out "Current State";
pin out bit arm_spindle "Arm is at the Spindle";

param rw float carousel_home_time=10.0 "Time in seconds for the carousel to home.";
param rw float carousel_move_time=1.2 "Time in seconds for the carousel to move one tool position.";
param rw float arm_move_time=7.0 "Time in seconds for moving a tool from the carousel to or from the spindle.";
param rw float complete_time_start=0.1 "Time in seconds after completeing an operation for qdreset to go TRUE";
param rw float complete_pulse_width=0.1 "Time in seconds for qdreset to stay TRUE";
param rw float claw_open_time=0.2 "Time in seconds for the claw open indication to happen after qdreset goes TRUE";

description """
qdtoolchange simulates the Dana Summit Quickdraw tool changer.o

""";

license "GPL";
author "K. Cunningham";
option singleton yes;
function _ ;
;;

// State names defined
typedef enum {
	STATE_IDLE = 0, // 0
	STATE_TOOL_OUT, // 1
	STATE_TOOL_IN, // 2
	STATE_CAROUSEL_CW, // 3
	STATE_CAROUSEL_CCW, // 4
	STATE_CAROUSEL_HOME, // 5
	STATE_COMPL_START, // 6
	STATE_COMPL_STOP // 7
} States;

#define STATE_STACK_DEPTH 10
static short cur_state;
static short prev_state;
static float timer;
static float home_time;
static int cur_pocket_no = 1; // Current tool number 
static bool arm_at_spindle; // Where is the arm
static bool claw_open = TRUE;
static bool compl_out;

bool state_changed;

FUNCTION(_) {
	/* Maintain the timer */
	timer += fperiod;	
	state_changed = (cur_state != prev_state);
	if(state_changed) {
		prev_state = cur_state;
	} 

	/* On entering each state other than IDLE, check for AUTO mode. If not, it's an error. */
	switch(cur_state) {
		case STATE_IDLE: // Check tool_change for a new tool request.
			if(!state_changed) { // Skip one pass after returning here.
				if(tool_in_command) {
					cur_state = STATE_TOOL_IN;
				} else if(tool_out_command) {
					cur_state = STATE_TOOL_OUT;
				} else if(carousel_cw_command) {
					cur_state = STATE_CAROUSEL_CW;
				} else if(carousel_ccw_command) {
					cur_state = STATE_CAROUSEL_CCW;
				} else if(carousel_home_command) {
					cur_state = STATE_CAROUSEL_HOME;
				}
			}
			break; // STATE_IDLE

		case STATE_TOOL_OUT: // 1
			if(state_changed) {
				if(arm_at_spindle) {
					/* Claw should close onto the tool if at spindle */
					timer = 0.0;
					claw_open = FALSE;
				} else {
					// Arm already at the carousel. Send a complete pulse
					cur_state = STATE_COMPL_START;
				}
			} else if(timer > arm_move_time) {
				// Time has passed. The arm is now at the carousel.
				arm_at_spindle = FALSE;
				cur_state = STATE_COMPL_START;
			}
			break; // STATE_INIT

		case STATE_TOOL_IN: // 2
			if(state_changed) {
				if(arm_at_spindle) {
					// Arm already at the spindle. Send a complete pulse
					cur_state = STATE_COMPL_START;
				} else {
					/* Claw should close onto the tool if at the carousel. */
					timer = 0.0;
					claw_open = FALSE;
				}
			} else if(timer > arm_move_time) {
				// Time has passed. The arm is now at the spindle.
				arm_at_spindle = TRUE;
				cur_state = STATE_COMPL_START;
			}
			break; // STATE_INIT

		case STATE_CAROUSEL_CW: // Move clockwise. State 3
			if (state_changed) {
				timer = 0.0;
			} else if(timer > carousel_move_time) {
				/* Moved one tool position*/
				if(--cur_pocket_no < 1)
					cur_pocket_no = 24;
				cur_state = STATE_COMPL_START;
			}
			break; // STATE_CAROUSEL_CW

		case STATE_CAROUSEL_CCW: // Move Counterclockwise. State 4
			if (state_changed) {
				timer = 0.0;
			} else if(timer > carousel_move_time) {
				/* Moved one tool position*/
				if(++cur_pocket_no > 24)
					cur_pocket_no = 1;
				cur_state = STATE_COMPL_START;
			}
			break; // STATE_CAROUSEL_CW

		case STATE_CAROUSEL_HOME: // State 5
			if(state_changed) {
				timer = 0.0;
				home_time = carousel_move_time * (cur_pocket_no - 1);
			} else if(timer > home_time) {
				/* Done with homing the carousel. */
				cur_pocket_no = 1;
				cur_state = STATE_COMPL_START;
			}
			break; // STATE_CAROUSEL_HOME

		case STATE_COMPL_START: // State 6
			/* Sets the complete output for the allowed time, 
			 * and after a different time sets the claw open indication */
			if(state_changed) {
				timer = 0.0;
			} else {
				if(timer > complete_time_start) {
					// Start the complete pulse
					compl_out = TRUE;
					cur_state = STATE_COMPL_STOP;
				}
			}
			break;

		case STATE_COMPL_STOP: // State 7
			/* Sets the complete output for the allowed time, 
			 * and after a different time sets the claw open indication */
			if(state_changed) {
				timer = 0.0;
			} else {
				if(compl_out && timer > complete_pulse_width) {
					// Time to stop the complete pulse
					compl_out = FALSE;
				}
				if(!claw_open && timer > claw_open_time) {
					// Time to open the claw if not already.
					claw_open = TRUE;
				}
				if(!compl_out && claw_open) {
					/* Exit after both operations are complete */
					cur_state = STATE_IDLE;
				}
			}
			break;
	} // switch(cur_state)

	/* Update outputs */
	qd_reset = compl_out;
	claw_open_out = claw_open;
	cur_tool_no = cur_pocket_no;
	cur_state_out = cur_state;
	arm_spindle = arm_at_spindle;
	test = timer;
}
